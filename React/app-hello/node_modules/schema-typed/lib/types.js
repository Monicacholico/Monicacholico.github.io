'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Type = function () {
    function Type(name) {
        _classCallCheck(this, Type);

        this.name = name;
        this.required = false;
        this.validators = [];
    }

    _createClass(Type, [{
        key: 'check',
        value: function check(v) {
            for (var i = this.validators.length; i > 0; i--) {
                var _validators = this.validators[i - 1];
                var onValid = _validators.onValid;
                var errorMessage = _validators.errorMessage;


                if (!this.required && (typeof v === 'undefined' || v.length === 0)) {
                    return { hasError: false };
                }

                if (!onValid(v)) {
                    return { hasError: true, errorMessage: errorMessage };
                }
            }
            return { hasError: false };
        }
    }, {
        key: 'addValidator',
        value: function addValidator(onValid, errorMessage) {
            errorMessage = errorMessage || this.validators[0].errorMessage;
            this.validators.push({ onValid: onValid, errorMessage: errorMessage });
        }
    }, {
        key: 'isRequired',
        value: function isRequired(errorMessage) {
            this.required = true;
            this.addValidator(function (v) {
                return typeof v !== 'undefined' && v.length > 0;
            }, errorMessage);
            return this;
        }
    }]);

    return Type;
}();

var Str = function (_Type) {
    _inherits(Str, _Type);

    _createClass(Str, null, [{
        key: 'from',
        value: function from(s) {
            return s + '';
        }
    }]);

    function Str() {
        var errorMessage = arguments.length <= 0 || arguments[0] === undefined ? 'no error message' : arguments[0];

        _classCallCheck(this, Str);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Str).call(this, 'string'));

        _get(Object.getPrototypeOf(Str.prototype), 'addValidator', _this).call(_this, function (v) {
            return typeof v === 'string';
        }, errorMessage);
        return _this;
    }

    _createClass(Str, [{
        key: 'isLongerThan',
        value: function isLongerThan(n, errorMessage) {
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return v.length > n;
            }, errorMessage);
            return this;
        }
    }, {
        key: 'containsLetter',
        value: function containsLetter(errorMessage) {
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return (/[a-zA-Z]/.test(v)
                );
            }, errorMessage);
            return this;
        }
    }, {
        key: 'containsUppercaseLetter',
        value: function containsUppercaseLetter(errorMessage) {
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return (/[A-Z]/.test(v)
                );
            }, errorMessage);
            return this;
        }
    }, {
        key: 'containsLowercaseLetter',
        value: function containsLowercaseLetter(errorMessage) {
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return (/[a-z]/.test(v)
                );
            }, errorMessage);
            return this;
        }
    }, {
        key: 'containsLetterOnly',
        value: function containsLetterOnly(errorMessage) {
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return (/^[a-zA-Z]+$/.test(v)
                );
            }, errorMessage);
            return this;
        }
    }, {
        key: 'containsNumber',
        value: function containsNumber(errorMessage) {
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return (/[0-9]/.test(v)
                );
            }, errorMessage);
            return this;
        }
    }, {
        key: 'isOneOf',
        value: function isOneOf(strArr, errorMessage) {
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return strArr.includes(v);
            }, errorMessage);
            return this;
        }
    }, {
        key: 'isEmail',
        value: function isEmail(errorMessage) {
            var re = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
            _get(Object.getPrototypeOf(Str.prototype), 'addValidator', this).call(this, function (v) {
                return re.test(v);
            }, errorMessage);
            return this;
        }
    }]);

    return Str;
}(Type);

var Num = function (_Type2) {
    _inherits(Num, _Type2);

    _createClass(Num, null, [{
        key: 'from',
        value: function from(n) {
            return +n;
        }
    }]);

    function Num() {
        var errorMessage = arguments.length <= 0 || arguments[0] === undefined ? 'no error message' : arguments[0];

        _classCallCheck(this, Num);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Num).call(this, 'number'));

        _get(Object.getPrototypeOf(Num.prototype), 'addValidator', _this2).call(_this2, function (v) {
            return typeof v === 'number' && !isNaN(v);
        }, errorMessage);
        return _this2;
    }

    _createClass(Num, [{
        key: 'isOneOf',
        value: function isOneOf(numLst, errorMessage) {
            _get(Object.getPrototypeOf(Num.prototype), 'addValidator', this).call(this, function (v) {
                return v in numLst;
            }, errorMessage);
            return this;
        }
    }]);

    return Num;
}(Type);

var StringType = exports.StringType = function StringType(errorMessage) {
    return new Str(errorMessage);
};
var NumberType = exports.NumberType = function NumberType(errorMessage) {
    return new Num(errorMessage);
};