{"ast":null,"code":"import _classCallCheck from \"/Users/molo/IdeaProjects/monica/React/app-hello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/molo/IdeaProjects/monica/React/app-hello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/molo/IdeaProjects/monica/React/app-hello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/molo/IdeaProjects/monica/React/app-hello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/molo/IdeaProjects/monica/React/app-hello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/molo/IdeaProjects/monica/React/app-hello/src/components/Spreadsheet.js\";\nimport React from 'react';\nimport { Grid, Input, Select } from 'react-spreadsheet-grid';\nimport AwesomeAutoComplete from 'awesome-autocomplete';\nvar rows = [{\n  id: 'user1',\n  name: \"John Doe\",\n  positionId: 'position1'\n}, {\n  id: 'user2',\n  name: \"Juan Perez\",\n  positionId: 'position2'\n}, {\n  id: 'user3',\n  name: \"Monica Lopez\",\n  positionId: 'position3'\n}];\n\nvar Spreadsheet =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Spreadsheet, _React$Component);\n\n  function Spreadsheet(props) {\n    var _this;\n\n    _classCallCheck(this, Spreadsheet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Spreadsheet).call(this, props));\n    _this.state = {\n      rows: rows,\n      columns: _this.initColumns()\n    };\n    return _this;\n  }\n\n  _createClass(Spreadsheet, [{\n    key: \"initColumns\",\n    value: function initColumns() {\n      var _this2 = this;\n\n      return [{\n        title: function title() {\n          return 'Name';\n        },\n        value: function value(row, _ref) {\n          var focus = _ref.focus;\n          // You can use the built-in Input.\n          return React.createElement(Input, {\n            value: row.name,\n            focus: focus,\n            onChange: _this2.onFieldChange.bind(_this2, row.id, 'name'),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: function title() {\n          return 'Position';\n        },\n        value: function value(row, _ref2) {\n          var focus = _ref2.focus;\n          // You can use the built-in Select.\n          return React.createElement(Select, {\n            value: row.positionId,\n            isOpen: focus // items={somePositions}\n            ,\n            onChange: _this2.onFieldChange.bind(_this2, row.id, 'positionId'),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: function title() {\n          return 'Manager';\n        },\n        value: function value(row, _ref3) {\n          var active = _ref3.active,\n              focus = _ref3.focus;\n          // You can use whatever component you want to change a value.\n          return React.createElement(AwesomeAutocomplete, {\n            value: row.managerId,\n            active: active,\n            focus: focus,\n            onSelectItem: _this2.onFieldChange.bind(_this2, row.id, 'managerId'),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          });\n        }\n      }];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Grid, {\n        columns: this.state.columns,\n        rows: this.state.rows,\n        getRowKey: function getRowKey(row) {\n          return row.id;\n        } // Don't forget to blur focused cell after a value has been changed.\n        ,\n        blurCurrentFocus: this.state.blurCurrentFocus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Spreadsheet;\n}(React.Component);\n\nexport default Spreadsheet;","map":{"version":3,"sources":["/Users/molo/IdeaProjects/monica/React/app-hello/src/components/Spreadsheet.js"],"names":["React","Grid","Input","Select","AwesomeAutoComplete","rows","id","name","positionId","Spreadsheet","props","state","columns","initColumns","title","value","row","focus","onFieldChange","bind","active","managerId","blurCurrentFocus","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Grid, Input, Select} from 'react-spreadsheet-grid';\nimport AwesomeAutoComplete from 'awesome-autocomplete';\n\nconst rows =[\n    {id: 'user1', name: \"John Doe\", positionId: 'position1'},\n    {id: 'user2', name: \"Juan Perez\", positionId: 'position2'},\n    {id: 'user3', name: \"Monica Lopez\", positionId: 'position3'}\n]\n\nclass Spreadsheet extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            rows,\n            columns:this.initColumns()\n        };\n    }\n\n    initColumns() {\n        return [\n            {\n                title: () => 'Name',\n                value: (row, { focus }) => {\n\n                    // You can use the built-in Input.\n                    return (\n                        <Input\n                            value={row.name}\n                            focus={focus}\n                            onChange={this.onFieldChange.bind(this, row.id, 'name')}\n                        />\n                    );\n                }\n            }, {\n                title: () => 'Position',\n                value: (row, { focus }) => {\n\n                    // You can use the built-in Select.\n                    return (\n                        <Select\n                            value={row.positionId}\n                            isOpen={focus}\n                            // items={somePositions}\n                            onChange={this.onFieldChange.bind(this, row.id, 'positionId')}\n                        />\n                    );\n                }\n            }, {\n                title: () => 'Manager',\n                value: (row, { active, focus }) => {\n\n                    // You can use whatever component you want to change a value.\n                    return (\n                        <AwesomeAutocomplete\n                            value={row.managerId}\n                            active={active}\n                            focus={focus}\n                            onSelectItem={this.onFieldChange.bind(this, row.id, 'managerId')}\n                        />\n                    );\n                }\n            }\n        ]\n    }\n\n    render() {\n        return (\n            <Grid\n                columns={this.state.columns}\n                rows={this.state.rows}\n                getRowKey={row => row.id}\n\n                // Don't forget to blur focused cell after a value has been changed.\n                blurCurrentFocus={this.state.blurCurrentFocus}\n            />\n        )\n    }\n}\n\n\nexport default Spreadsheet;"]},"metadata":{},"sourceType":"module"}